
def extended_gcd(a, b):
    """
    The function extended_gcd implements the Extended Euclidean Algorithm.
    It returns a tuple (g, x, y) such that g = gcd(a, b) and ax + by = g.
    """
    if a == 0:
        return b, 0, 1
    else:
        g, x1, y1 = extended_gcd(b % a, a)
        x = y1 - (b // a) * x1
        y = x1
        return g, x, y

def modular_inverse(x, m):
    """
    This function finds the modular inverse of x under modulus m using
    the Extended Euclidean Algorithm. It returns the inverse if it exists,
    otherwise it returns None.
    """
    g, inv, _ = extended_gcd(x, m)
    if g != 1:
        # Inverse doesn't exist if gcd is not 1
        return None
    else:
        # Ensure the inverse is positive
        return inv % m

def rsa_encrypt_pub(m, p, q, e):

    return pow(m, e, p*q)



def euler_totient(p, q):
    return (p - 1) * (q - 1)


def calculate_d(e, p, q):
    phi = euler_totient(p, q)

    return modular_inverse(e, phi)

def rsa_encrypt_priv(c, p, q, e):
    d = calculate_d(e, p, q)
    return pow(c, d, p*q)




# solving the last starter challenges
if __name__ == "__main__":
    from Crypto.Util.number import *
    import hashlib
    
    flag = b"crypto{Immut4ble_m3ssag1ng}"

    hash_flag = hashlib.sha256(flag).digest()

    data_to_sign = bytes_to_long(hash_flag)
    N = 15216583654836731327639981224133918855895948374072384050848479908982286890731769486609085918857664046075375253168955058743185664390273058074450390236774324903305663479046566232967297765731625328029814055635316002591227570271271445226094919864475407884459980489638001092788574811554149774028950310695112688723853763743238753349782508121985338746755237819373178699343135091783992299561827389745132880022259873387524273298850340648779897909381979714026837172003953221052431217940632552930880000919436507245150726543040714721553361063311954285289857582079880295199632757829525723874753306371990452491305564061051059885803

    d = 11175901210643014262548222473449533091378848269490518850474399681690547281665059317155831692300453197335735728459259392366823302405685389586883670043744683993709123180805154631088513521456979317628012721881537154107239389466063136007337120599915456659758559300673444689263854921332185562706707573660658164991098457874495054854491474065039621922972671588299315846306069845169959451250821044417886630346229021305410340100401530146135418806544340908355106582089082980533651095594192031411679866134256418292249592135441145384466261279428795408721990564658703903787956958168449841491667690491585550160457893350536334242689

    print(pow(data_to_sign, d, N))
    
    

    


